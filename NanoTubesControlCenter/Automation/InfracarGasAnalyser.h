#pragma once

#include "PhysDevice.h"
#include "common.h"

class InfracarGasAnalyser : public IdentifiedPhysDevice, public IAnalogInput
{
public:

	
	InfracarGasAnalyser(void);
	virtual ~InfracarGasAnalyser(void);

	virtual bool CreateFromXMLNode(IXMLDOMNode* pNode);	
	static InfracarGasAnalyser* CreateFromXML(IXMLDOMNode* pNode, UINT& error);

public:

	//////////////////////////////////////////////////////////////////////////
	//interface IAnalogInput
	//Получение общего числа аналоговых входов
	virtual int GetChannelsCountAI() const 
	{
		return INPUT_ANALOG_CHANNELS_COUNT; 
	};

	//Получение данных со всех аналоговых входов (выполняется запрос на чтение данных)
	virtual void	ReadChannels(double* data  = NULL) const;

	//Получение данных с одного из аналоговых входов (выполняется запрос на чтение данных)
	virtual double  ReadChannel(unsigned char channel)  const;

	// Получение данных из буфера для одного из аналоговых входов 
	// (запрос на чтение данных не выполняется)
	virtual double  GetChannelData(unsigned char channel)  const;

	//Получить  информацию об измеряемом диапазоне канала
	virtual void GetInputRangeInfo(unsigned char channel, LPMEASSURE_RANGE_INFO lpmci) const;

	//Установить  диапазон  аналогового входа
	virtual bool SetInputRange(unsigned char ch, unsigned char range);

	//Получить все возможные  диапазоны  измерения
	virtual void EnumInputRanges(unsigned char ch, std::vector<MEASSURE_RANGE_INFO>& rngs) const;

protected:

	//Функция процесса выполяется циклически через заданный интервал времени
	virtual void ControlProc();

	//число аналоговых входов = 7
	const int INPUT_ANALOG_CHANNELS_COUNT; 

	//Номер COM порта 
	int comPortNo;

	//Данные прибора
	mutable double data[7];

	//информация о измеряемых диапазонах
	std::vector<MEASSURE_RANGE_INFO> ranges;
};

